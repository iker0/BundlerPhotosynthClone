<script type="text/javascript">

  var PSView = Class.create({
    ps: null,
    position: null,
    initialize: function(ply_file, canvas_container) {
      this.position = new PSView.Position();
      var a_canvas = new Element('canvas', {'width': '500', 'height': '300'});
      canvas_container.insert(a_canvas);
      this.ps = new PointStream();

      this.ps.setup(a_canvas, PSView.renderFunction.bind(this));
      this.ps.background([0, 0, 0, 1.0]);
      this.ps.pointSize(0.2);
      this.ps.loadFile({path: ply_file });

      a_canvas.observe('mousedown', PSView.dragStartFunction.bind(this));
      PSView.firstRunInit();
    }
  });
  Object.extend(PSView, {
    Position: Class.create({ x: 0, y: 0, rotX: 0, rotY: 0 }),
    runYet: false,
    firstRunInit: function() {
      if (!PSView.runYet) {
        Event.observe(document.body, 'mouseup', PSView.dragStopFunction);
        PSView.runYet = true;
      }
    },
    dragTracking: new Hash(),
    dragContinueFunction: function(e) {
      PSView.dragTracking.set('mouseX', e.pointerX());
      PSView.dragTracking.set('mouseY', e.pointerY());
    },
    dragStartFunction: function(e) {
      if (e.isLeftClick()) {
        PSView.dragTracking.set('dragging', true);
      } else {
        PSView.dragTracking.set('moving', true);
      }
      PSView.dragTracking.set('element', this);
      PSView.dragTracking.set('startX', e.pointerX());
      PSView.dragTracking.set('startY', e.pointerY());
      PSView.dragTracking.set('mouseX', e.pointerX());
      PSView.dragTracking.set('mouseY', e.pointerY());
      document.body.observe('mousemove', PSView.dragContinueFunction);
      e.stop();
    },
    dragStopFunction: function(e) {
      PSView.dragTracking.unset('element');
      PSView.dragTracking.unset('dragging');
      PSView.dragTracking.unset('moving');
      document.body.stopObserving('mousemove', PSView.dragContinueFunction);
      e.stop();
    },
    renderFunction: function() {
      var zoomed = -1;


      if (PSView.dragTracking.get('element') == this) {
        var deltaX = PSView.dragTracking.get('mouseX') - PSView.dragTracking.get('startX');
        var deltaY = PSView.dragTracking.get('mouseY') - PSView.dragTracking.get('startY');
        PSView.dragTracking.set('startX', PSView.dragTracking.get('mouseX'));
        PSView.dragTracking.set('startY', PSView.dragTracking.get('mouseY'));
        if (PSView.dragTracking.get('dragging')) {
          this.position.rotY += deltaX / this.ps.width * 5;
          this.position.rotX += deltaY / this.ps.height * 5;
        } else if (PSView.dragTracking.get('moving')) {
          this.position.x += deltaX / this.ps.width * 5;
          this.position.y += deltaY / this.ps.height * 5;
        }
      }
      $('debug').innerHTML = "DeltaX: " + deltaX + ", DeltaY: " + deltaY + ", RotX: " + this.position.rotX + ", RotY: " + this.position.rotY;
      $('debug').innerHTML += ", MovX: " + this.position.x + ", MovY: " + this.position.y;

      // Recenter at origin
      this.ps.translate(0, 0, zoomed);

      // Rotate
      this.ps.rotateX(this.position.rotX);
      this.ps.rotateY(this.position.rotY);

      // Recenter on center of rotated object
      if (this.ps.file != undefined) {
        // Recenter on the actual object
        var c = this.ps.file.getCenter();
        this.ps.translate(-c[0],-c[1],-c[2]);
      }

      //this.ps.translate(this.position.x, this.position.y, zoomed);
      //$('debug').innerHTML = this.ps.file.getPointCount() + " points @ " + Math.floor(this.ps.frameRate) + " FPS";

      // redraw
      this.ps.clear();
      this.ps.render();
    }
  });
  function initViews() {
    var render;
    <% @bundle_plys.each do |bundle_ply| %>
      // View of <%= bundle_ply.name %>
      var psv = new PSView('<%= escape_javascript(ply_url(:id => @bundle.id, :bundler_file_id => bundle_ply.id)) %>', $('views'));
    <% end %>
  }

</script>
<div id="views"></div>

<span id="debug"></span>
<script type="text/javascript">
  Event.observe(window, 'load', initViews);
</script>
